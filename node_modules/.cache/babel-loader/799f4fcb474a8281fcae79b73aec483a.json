{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liaml\\\\OneDrive\\\\Documents\\\\Session4\\\\Transactionnel\\\\REACTP4\\\\src\\\\pages\\\\ClientsPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Clients from '../components/Clients';\nimport AddClient from '../components/AddClient';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ClientPage() {\n  _s();\n\n  const [showAddClient, setShowAddClient] = useState(false);\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const getClients = async () => {\n      const clientsFromServer = await fetchClients();\n      setClients(clientsFromServer);\n    };\n\n    getClients();\n  }, []); // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\n  // C'est comme le lifecycle event 'ComponentDidMount'\n\n  const fetchClients = async () => {\n    const res = await fetch('http://localhost:8080/clients');\n    const data = await res.json();\n    return data;\n  };\n\n  const addClient = async client => {\n    const res = await fetch('http://localhost:8080/client', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(client)\n    });\n    const data = await res.json();\n    setClients([...clients, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  };\n\n  const deleteClient = async id => {\n    await fetch(`http://localhost:8080/client/${id}`, {\n      method: 'DELETE'\n    });\n    setClients(clients.filter(client => client.id !== id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddClient(!showAddClient),\n      showAdd: showAddClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), showAddClient && /*#__PURE__*/_jsxDEV(AddClient, {\n      onAdd: addClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 31\n    }, this), clients.length > 0 ? /*#__PURE__*/_jsxDEV(Clients, {\n      clients: clients,\n      onDelete: deleteClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this) : 'No clients']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClientPage, \"9V3cmMWiEoPxaA5iWhxFkNQTrtY=\");\n\n_c = ClientPage;\nexport default ClientPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientPage\");","map":{"version":3,"sources":["C:/Users/liaml/OneDrive/Documents/Session4/Transactionnel/REACTP4/src/pages/ClientsPage.js"],"names":["useState","useEffect","Clients","AddClient","Header","ClientPage","showAddClient","setShowAddClient","clients","setClients","getClients","clientsFromServer","fetchClients","res","fetch","data","json","addClient","client","method","headers","body","JSON","stringify","deleteClient","id","filter","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAKA,SAASC,UAAT,GAAqB;AAAA;;AACjB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,YAAY;AAC9B,YAAMC,iBAAiB,GAAG,MAAMC,YAAY,EAA5C;AACAH,MAAAA,UAAU,CAACE,iBAAD,CAAV;AACH,KAHE;;AAIJD,IAAAA,UAAU;AACX,GANU,EAMR,EANQ,CAAT,CAJiB,CAUX;AACR;;AAEA,QAAME,YAAY,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD;;AAQA,QAAME,SAAS,GAAG,MAAOC,MAAP,IAAkB;AAClC,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAAD,EACvB;AACEK,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALR,KADuB,CAAvB;AAQA,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaO,IAAb,CAAD,CAAV,CAVkC,CAalC;AACA;AACA;AACD,GAhBD;;AAkBA,QAAMS,YAAY,GAAG,MAAOC,EAAP,IAAc;AACjC,UAAMX,KAAK,CAAE,gCAA+BW,EAAG,EAApC,EAAuC;AAChDN,MAAAA,MAAM,EAAE;AADwC,KAAvC,CAAX;AAGAV,IAAAA,UAAU,CAACD,OAAO,CAACkB,MAAR,CAAgBR,MAAD,IAAYA,MAAM,CAACO,EAAP,KAAcA,EAAzC,CAAD,CAAV;AACD,GALD;;AAME,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAMlB,gBAAgB,CAAC,CAACD,aAAF,CAArC;AACN,MAAA,OAAO,EAAEA;AADH;AAAA;AAAA;AAAA;AAAA,YADJ,EAGKA,aAAa,iBAAI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEW;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHtB,EAIGT,OAAO,CAACmB,MAAR,GAAiB,CAAjB,gBACC,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEnB,OAAlB;AACE,MAAA,QAAQ,EAAEgB;AADZ;AAAA;AAAA;AAAA;AAAA,YADD,GAGC,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAxDQnB,U;;KAAAA,U;AA0DT,eAAeA,UAAf","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport Clients from '../components/Clients'\r\nimport AddClient from '../components/AddClient';\r\nimport Header from '../components/Header';\r\n\r\n\r\n\r\n\r\nfunction ClientPage(){\r\n    const [showAddClient, setShowAddClient] = useState(false)\r\n    const [clients, setClients] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getClients = async () => {\r\n         const clientsFromServer = await fetchClients()\r\n         setClients(clientsFromServer)\r\n     }\r\n    getClients()\r\n  }, [])  // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\r\n  // C'est comme le lifecycle event 'ComponentDidMount'\r\n\r\n  const fetchClients = async () => {\r\n    const res = await fetch('http://localhost:8080/clients')\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  \r\n\r\n  const addClient = async (client) => {\r\n    const res = await fetch('http://localhost:8080/client',\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(client)\r\n    })\r\n    const data = await res.json()\r\n    setClients([...clients, data])\r\n\r\n    \r\n    // const id = Math.floor(Math.random() * 10000) + 1\r\n    // const newTask = {id, ...task}\r\n    // setTasks([...tasks, newTask])\r\n  }\r\n\r\n  const deleteClient = async (id) => {\r\n    await fetch(`http://localhost:8080/client/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    setClients(clients.filter((client) => client.id !== id))\r\n  }\r\n    return (\r\n        <div>\r\n            <Header onAdd={() => setShowAddClient(!showAddClient)}\r\n      showAdd={showAddClient}/>\r\n            {showAddClient && <AddClient onAdd={addClient} />}\r\n          {clients.length > 0 ?\r\n            <Clients clients={clients} \r\n              onDelete={deleteClient}/>\r\n          : 'No clients'}   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClientPage"]},"metadata":{},"sourceType":"module"}