{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liaml\\\\OneDrive\\\\Documents\\\\Session4\\\\Transactionnel\\\\REACTP4\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport About from './components/About';\nimport ClientPage from './pages/ClientsPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddClient, setShowAddClient] = useState(false);\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const getClients = async () => {\n      const clientsFromServer = await fetchClients();\n      setClients(clientsFromServer);\n    };\n\n    getClients();\n  }, []); // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\n  // C'est comme le lifecycle event 'ComponentDidMount'\n\n  const fetchClients = async () => {\n    const res = await fetch('http://localhost:8080/clients');\n    const data = await res.json();\n    return data;\n  };\n\n  const addClient = async client => {\n    const res = await fetch('http://localhost:8080/client', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(client)\n    });\n    const data = await res.json();\n    setClients([...clients, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  };\n\n  const deleteClient = async id => {\n    await fetch(`http://localhost:8080/client/${id}`, {\n      method: 'DELETE'\n    });\n    setClients(clients.filter(client => client.id !== id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddClient(!showAddClient),\n        showAdd: showAddClient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/clients\",\n        exact: true,\n        render: ClientPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9V3cmMWiEoPxaA5iWhxFkNQTrtY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/liaml/OneDrive/Documents/Session4/Transactionnel/REACTP4/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Header","Footer","About","ClientPage","App","showAddClient","setShowAddClient","clients","setClients","getClients","clientsFromServer","fetchClients","res","fetch","data","json","addClient","client","method","headers","body","JSON","stringify","deleteClient","id","filter"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;AAEA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,YAAMC,iBAAiB,GAAG,MAAMC,YAAY,EAA5C;AACAH,MAAAA,UAAU,CAACE,iBAAD,CAAV;AACD,KAHD;;AAIAD,IAAAA,UAAU;AACX,GANQ,EAMN,EANM,CAAT,CAJa,CAUL;AACR;;AAEA,QAAME,YAAY,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD;;AAQA,QAAME,SAAS,GAAG,MAAOC,MAAP,IAAkB;AAClC,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAAD,EACvB;AACEK,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALR,KADuB,CAAvB;AAQA,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaO,IAAb,CAAD,CAAV,CAVkC,CAalC;AACA;AACA;AACD,GAhBD;;AAkBA,QAAMS,YAAY,GAAG,MAAOC,EAAP,IAAc;AACjC,UAAMX,KAAK,CAAE,gCAA+BW,EAAG,EAApC,EAAuC;AAChDN,MAAAA,MAAM,EAAE;AADwC,KAAvC,CAAX;AAGAV,IAAAA,UAAU,CAACD,OAAO,CAACkB,MAAR,CAAgBR,MAAD,IAAYA,MAAM,CAACO,EAAP,KAAcA,EAAzC,CAAD,CAAV;AACD,GALD;;AAQA,sBACE,QAAC,MAAD;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,MAAMlB,gBAAgB,CAAC,CAACD,aAAF,CAArC;AACA,QAAA,OAAO,EAAEA;AADT;AAAA;AAAA;AAAA;AAAA,cADF,eAIG,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,KAAK,MAA5B;AAA6B,QAAA,MAAM,EAAEF;AAArC;AAAA;AAAA;AAAA;AAAA,cAJH,eAKG,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAED;AAAhC;AAAA;AAAA;AAAA;AAAA,cALH,eAMG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cANH;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA3DQE,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\n\r\nimport About from './components/About';\r\nimport ClientPage from './pages/ClientsPage';\r\n\r\nfunction App() {\r\n  const [showAddClient, setShowAddClient] = useState(false)\r\n  const [clients, setClients] = useState([])\r\n\r\n  useEffect(() => {\r\n    const getClients = async () => {\r\n      const clientsFromServer = await fetchClients()\r\n      setClients(clientsFromServer)\r\n    }\r\n    getClients()\r\n  }, [])  // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\r\n  // C'est comme le lifecycle event 'ComponentDidMount'\r\n\r\n  const fetchClients = async () => {\r\n    const res = await fetch('http://localhost:8080/clients')\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  \r\n\r\n  const addClient = async (client) => {\r\n    const res = await fetch('http://localhost:8080/client',\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(client)\r\n    })\r\n    const data = await res.json()\r\n    setClients([...clients, data])\r\n\r\n    \r\n    // const id = Math.floor(Math.random() * 10000) + 1\r\n    // const newTask = {id, ...task}\r\n    // setTasks([...tasks, newTask])\r\n  }\r\n\r\n  const deleteClient = async (id) => {\r\n    await fetch(`http://localhost:8080/client/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    setClients(clients.filter((client) => client.id !== id))\r\n  }\r\n\r\n\r\n  return (\r\n    <Router>\r\n    <div className='container'>\r\n      <Header onAdd={() => setShowAddClient(!showAddClient)}\r\n      showAdd={showAddClient}/>\r\n      \r\n       <Route path='/clients' exact render={ClientPage} />\r\n       <Route path='/about' component={About} />\r\n       <Footer />\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}