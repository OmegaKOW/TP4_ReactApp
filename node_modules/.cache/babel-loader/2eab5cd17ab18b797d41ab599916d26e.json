{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liaml\\\\OneDrive\\\\Documents\\\\Session4\\\\Transactionnel\\\\REACTP4\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Clients from './components/Clients';\nimport AddClient from './components/AddClient';\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddClient, setShowAddClient] = useState(false);\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const getClients = async () => {\n      const clientsFromServer = await fetchClients();\n      setClients(clientsFromServer);\n    };\n\n    getClients();\n  }, []); // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\n  // C'est comme le lifecycle event 'ComponentDidMount'\n\n  const fetchClients = async () => {\n    const res = await fetch('http://localhost:8080/clients');\n    const data = await res.json();\n    return data;\n  };\n\n  const fetchClient = async id => {\n    const res = await fetch(`http://localhost:8080/client/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  const addClient = async client => {\n    const res = await fetch('http://localhost:8080/client', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(client)\n    });\n    const data = await res.json();\n    setClients([...clients, data]); // const id = Math.floor(Math.random() * 10000) + 1\n    // const newTask = {id, ...task}\n    // setTasks([...tasks, newTask])\n  };\n\n  const deleteClient = async id => {\n    await fetch(`http://localhost:8080/client/${id}`, {\n      method: 'DELETE'\n    });\n    setClients(clients.filter(client => client.id !== id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddClient(!showAddClient),\n        showAdd: showAddClient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showAddClient && /*#__PURE__*/_jsxDEV(AddClient, {\n            onAdd: addClient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), clients.length > 0 ? /*#__PURE__*/_jsxDEV(Clients, {\n            clients: clients,\n            onDelete: deleteClient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this) : 'No clients']\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9V3cmMWiEoPxaA5iWhxFkNQTrtY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/liaml/OneDrive/Documents/Session4/Transactionnel/REACTP4/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Route","Header","Footer","Clients","AddClient","About","App","showAddClient","setShowAddClient","clients","setClients","getClients","clientsFromServer","fetchClients","res","fetch","data","json","fetchClient","id","addClient","client","method","headers","body","JSON","stringify","deleteClient","filter","props","length"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport Clients from './components/Clients'\r\nimport AddClient from './components/AddClient';\r\nimport About from './components/About';\r\n\r\nfunction App() {\r\n  const [showAddClient, setShowAddClient] = useState(false)\r\n  const [clients, setClients] = useState([])\r\n\r\n  useEffect(() => {\r\n    const getClients = async () => {\r\n      const clientsFromServer = await fetchClients()\r\n      setClients(clientsFromServer)\r\n    }\r\n    getClients()\r\n  }, [])  // Ajout de dependency array pour prevenir le 'useEffect' a chaquer 'render()'\r\n  // C'est comme le lifecycle event 'ComponentDidMount'\r\n\r\n  const fetchClients = async () => {\r\n    const res = await fetch('http://localhost:8080/clients')\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  const fetchClient = async(id) => {\r\n    const res = await fetch(`http://localhost:8080/client/${id}`)\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  const addClient = async (client) => {\r\n    const res = await fetch('http://localhost:8080/client',\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(client)\r\n    })\r\n    const data = await res.json()\r\n    setClients([...clients, data])\r\n\r\n    \r\n    // const id = Math.floor(Math.random() * 10000) + 1\r\n    // const newTask = {id, ...task}\r\n    // setTasks([...tasks, newTask])\r\n  }\r\n\r\n  const deleteClient = async (id) => {\r\n    await fetch(`http://localhost:8080/client/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    setClients(clients.filter((client) => client.id !== id))\r\n  }\r\n\r\n\r\n  return (\r\n    <Router>\r\n    <div className='container'>\r\n      <Header onAdd={() => setShowAddClient(!showAddClient)}\r\n      showAdd={showAddClient}/>\r\n      \r\n       <Route path='/' exact render={(props) => (\r\n         <>\r\n          {showAddClient && <AddClient onAdd={addClient} />}\r\n          {clients.length > 0 ?\r\n            <Clients clients={clients} \r\n              onDelete={deleteClient}/>\r\n          : 'No clients'}   \r\n         </>\r\n       )} />\r\n       <Route path='/about' component={About} />\r\n       <Footer />\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}